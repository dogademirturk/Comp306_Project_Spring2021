/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package main_page;

import login_page.login_page;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import util.connectionUtil;
import java.awt.BorderLayout;
import java.awt.GridLayout;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JPasswordField;
import javax.swing.JTextField;

/**
 *
 * @author Murat Kaya
 */
public class main_client extends javax.swing.JFrame {
    
        static String username;
        String title;

    /**
     * Creates new form main_client
     */
    public main_client(String uname) {
        username = uname;
        title = "Welcome " + username + "!";
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        houseTypeCombo = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        regionCombo = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        suburbCombo = new javax.swing.JComboBox<>();
        jLabel6 = new javax.swing.JLabel();
        roomNumCombo = new javax.swing.JComboBox<>();
        jLabel7 = new javax.swing.JLabel();
        bathroomNumCombo = new javax.swing.JComboBox<>();
        searchButton = new javax.swing.JButton();
        priceOrderCombo = new javax.swing.JComboBox<>();
        jLabel8 = new javax.swing.JLabel();
        priceSlider = new javax.swing.JSlider();
        priceLabel = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        editLabel = new javax.swing.JLabel();
        logoutLabel = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel_locations = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        housesTable = new javax.swing.JTable();
        buyButton = new javax.swing.JButton();
        infoButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle(title);
        setLocationByPlatform(true);
        setResizable(false);

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setMaximumSize(new java.awt.Dimension(1352, 647));
        jPanel2.setLayout(new BorderLayout());

        jPanel3.setBackground(new java.awt.Color(221, 255, 255));
        jPanel3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 255), 3));

        jLabel3.setText("House Type");

        houseTypeCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "-Select-", "villa", "unit", "terrace" }));
        houseTypeCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                houseTypeComboActionPerformed(evt);
            }
        });

        jLabel4.setText("Region");

        regionCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "-Select-" }));
        String query_region;
        PreparedStatement ps_region;
        ResultSet rs_region;

        query_region="SELECT DISTINCT RegionName FROM HOUSE_LOCATIONS ORDER BY RegionName ASC";

        try{
            ps_region=connectionUtil.getTheConnection().prepareStatement(query_region);
            rs_region=ps_region.executeQuery();

            while(rs_region.next()){
                regionCombo.addItem(rs_region.getString("RegionName"));
            }
        } catch (SQLException e) {
            Logger.getLogger(login_page.class.getName()).log(Level.SEVERE,null,e);
        }
        regionCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                regionComboActionPerformed(evt);
            }
        });

        jLabel5.setText("Suburb");

        suburbCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "-Select-" }));
        String query_suburb;
        PreparedStatement ps_suburb;
        ResultSet rs_suburb;

        query_suburb="SELECT DISTINCT Suburb FROM HOUSE_LOCATIONS ORDER BY Suburb ASC";

        try{
            ps_suburb=connectionUtil.getTheConnection().prepareStatement(query_suburb);
            rs_suburb=ps_suburb.executeQuery();

            while(rs_suburb.next()){
                suburbCombo.addItem(rs_suburb.getString("Suburb"));
            }
        } catch (SQLException e) {
            Logger.getLogger(login_page.class.getName()).log(Level.SEVERE,null,e);
        }
        suburbCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                suburbComboActionPerformed(evt);
            }
        });

        jLabel6.setText("Room Number");

        roomNumCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "-Select-" }));
        String query_rnum;
        PreparedStatement ps_rnum;
        ResultSet rs_rnum;

        query_rnum="SELECT DISTINCT RoomNum FROM HOUSES ORDER BY RoomNum ASC";

        try{
            ps_rnum=connectionUtil.getTheConnection().prepareStatement(query_rnum);
            rs_rnum=ps_rnum.executeQuery();

            while(rs_rnum.next()){
                roomNumCombo.addItem(rs_rnum.getString("RoomNum"));
            }
        } catch (SQLException e) {
            Logger.getLogger(login_page.class.getName()).log(Level.SEVERE,null,e);
        }
        roomNumCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                roomNumComboActionPerformed(evt);
            }
        });

        jLabel7.setText("Bathroom Number");

        bathroomNumCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "-Select-" }));
        String query_bnum;
        PreparedStatement ps_bnum;
        ResultSet rs_bnum;

        query_bnum="SELECT DISTINCT Bathroom_num FROM HOUSES ORDER BY Bathroom_Num";

        try{
            ps_bnum=connectionUtil.getTheConnection().prepareStatement(query_bnum);
            rs_bnum=ps_bnum.executeQuery();

            while(rs_bnum.next()){
                bathroomNumCombo.addItem(rs_bnum.getString("Bathroom_num"));
            }
        } catch (SQLException e) {
            Logger.getLogger(login_page.class.getName()).log(Level.SEVERE,null,e);
        }
        bathroomNumCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bathroomNumComboActionPerformed(evt);
            }
        });

        searchButton.setText("Search!");
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });

        priceOrderCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "-Select-", "Increasing", "Decreasing" }));
        priceOrderCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                priceOrderComboActionPerformed(evt);
            }
        });

        jLabel8.setText("Price (up to)");

        String query_price;
        PreparedStatement ps_price;
        ResultSet rs_price;

        int min = 0;
        int max = 10000000;

        query_price = "SELECT MIN(Price) AS min, MAX(Price) AS max FROM HOUSES";

        try{
            ps_price = connectionUtil.getTheConnection().prepareStatement(query_price);
            rs_price = ps_price.executeQuery();

            rs_price.next();

            min = rs_price.getInt("min");
            max = rs_price.getInt("max");

        } catch (SQLException e) {
            Logger.getLogger(login_page.class.getName()).log(Level.SEVERE,null,e);
        }
        priceSlider.setMaximum(max);
        priceSlider.setMinimum(min);
        priceSlider.setValue(max);
        priceSlider.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                priceSliderMouseClicked(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                priceSliderMouseReleased(evt);
            }
        });

        String val = String.valueOf(priceSlider.getValue());
        priceLabel.setText(val);

        jLabel9.setText("Order by Price");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(priceSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(jPanel3Layout.createSequentialGroup()
                            .addComponent(jLabel4)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(regionCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel3Layout.createSequentialGroup()
                            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel3)
                                .addComponent(jLabel6))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(houseTypeCombo, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(roomNumCombo, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(jPanel3Layout.createSequentialGroup()
                            .addComponent(jLabel7)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(bathroomNumCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                            .addComponent(jLabel5)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(suburbCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(jPanel3Layout.createSequentialGroup()
                            .addComponent(jLabel9)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(priceOrderCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel3Layout.createSequentialGroup()
                            .addGap(134, 134, 134)
                            .addComponent(priceLabel)))))
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(100, 100, 100)
                .addComponent(searchButton))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(houseTypeCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(roomNumCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bathroomNumCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(regionCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(suburbCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(priceSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(priceLabel)
                .addGap(25, 25, 25)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(priceOrderCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 50, Short.MAX_VALUE)
                .addComponent(searchButton)
                .addGap(33, 33, 33))
        );

        jPanel1.setBackground(new java.awt.Color(204, 204, 255));

        editLabel.setFont(new java.awt.Font("Tw Cen MT Condensed", 1, 36)); // NOI18N
        editLabel.setForeground(new java.awt.Color(255, 255, 255));
        editLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        editLabel.setText("Edit Profile");
        editLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                editLabelMouseClicked(evt);
            }
        });

        logoutLabel.setFont(new java.awt.Font("Tw Cen MT Condensed", 1, 36)); // NOI18N
        logoutLabel.setForeground(new java.awt.Color(255, 255, 255));
        logoutLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        logoutLabel.setText("Log Out");
        logoutLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                logoutLabelMouseClicked(evt);
            }
        });

        jLabel1.setBackground(new java.awt.Color(255, 255, 255));
        jLabel1.setFont(new java.awt.Font("Tw Cen MT Condensed", 1, 48)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(204, 204, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/main_page/branch.png"))); // NOI18N
        jLabel1.setToolTipText("");

        jLabel_locations.setFont(new java.awt.Font("Tw Cen MT Condensed", 1, 36)); // NOI18N
        jLabel_locations.setForeground(new java.awt.Color(255, 255, 255));
        jLabel_locations.setText("Locations");
        jLabel_locations.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel_locationsMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(97, 97, 97)
                .addComponent(jLabel_locations)
                .addGap(288, 288, 288)
                .addComponent(editLabel)
                .addGap(196, 196, 196)
                .addComponent(logoutLabel)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 134, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(44, 44, 44)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(editLabel)
                    .addComponent(logoutLabel)
                    .addComponent(jLabel_locations, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        housesTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Type", "Room Number", "Bathroom Number", "Agency", "Price"
            }
        ){
            @Override
            public boolean isCellEditable(int row, int column) {
                //all cells false
                return false;
            }
        });
        String query;
        PreparedStatement ps;
        ResultSet rs;

        query = "SELECT H.House_ID, H.Type, H.RoomNum, H.Bathroom_num, H.Seller_Agency, H.Price, L.RegionName, L.Suburb "
        + "FROM HOUSES AS H NATURAL JOIN HOUSE_LOCATIONS AS L "
        + "WHERE H.User_ID='' "
        + "ORDER BY House_ID ASC";

        try{
            ps = connectionUtil.getTheConnection().prepareStatement(query);
            rs = ps.executeQuery();

            while(rs.next()){
                String id = String.valueOf(rs.getInt("House_ID"));
                String type = rs.getString("Type");
                String roomNo = String.valueOf(rs.getInt("RoomNum"));
                String bathroomNo = String.valueOf(rs.getInt("Bathroom_num"));
                String agency = rs.getString("Seller_Agency");
                String price = String.valueOf(rs.getInt("Price"));

                String tbData[] = {id, type, roomNo, bathroomNo, agency, price};
                DefaultTableModel tblModel = (DefaultTableModel) housesTable.getModel();
                tblModel.addRow(tbData);
            }

        } catch (SQLException e) {
            Logger.getLogger(login_page.class.getName()).log(Level.SEVERE,null,e);
        }
        jScrollPane1.setViewportView(housesTable);

        buyButton.setText("Buy!");
        buyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buyButtonActionPerformed(evt);
            }
        });

        infoButton.setText("See Detailed Info");
        infoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                infoButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(118, 118, 118)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(54, 54, 54)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 720, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(655, 655, 655)
                        .addComponent(infoButton)
                        .addGap(103, 103, 103)
                        .addComponent(buyButton)))
                .addContainerGap(364, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(70, 70, 70)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 337, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(12, 12, 12)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buyButton)
                    .addComponent(infoButton))
                .addGap(0, 73, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void logoutLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_logoutLabelMouseClicked
        // TODO add your handling code here:
        //log out from the account turn back to log in page
        this.dispose();
        login_page login= new login_page();
        login.setVisible(true);
        login.setExtendedState(NORMAL);
    }//GEN-LAST:event_logoutLabelMouseClicked

    private void roomNumComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_roomNumComboActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_roomNumComboActionPerformed

    private void suburbComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_suburbComboActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_suburbComboActionPerformed

    private void regionComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_regionComboActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_regionComboActionPerformed

    private void houseTypeComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_houseTypeComboActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_houseTypeComboActionPerformed

    private void bathroomNumComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bathroomNumComboActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_bathroomNumComboActionPerformed

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
        // TODO add your handling code here:
        String houseType = houseTypeCombo.getSelectedItem().toString();
        String region = regionCombo.getSelectedItem().toString();
        String suburb = suburbCombo.getSelectedItem().toString();
        String roomNum = roomNumCombo.getSelectedItem().toString();
        String bathroomNum = bathroomNumCombo.getSelectedItem().toString();
        String priceLimit = String.valueOf(priceSlider.getValue());
        String priceOrder = priceOrderCombo.getSelectedItem().toString();
        
        String h_type = "";
        if(houseType.equals("villa")) h_type = "h";
        else if(houseType.equals("unit")) h_type = "u";
        else if(houseType.equals("terrace")) h_type = "t";
        
        String query;
        PreparedStatement ps;
        ResultSet rs;
           
        //TODO QUERYE LOCATION EKLE
        query = "SELECT * FROM HOUSES AS H NATURAL JOIN HOUSE_LOCATIONS AS L WHERE H.User_ID=0 AND H.Price<" + priceLimit;
        
        if(!houseType.equals("-Select-"))
            query += " AND H.Type='" + h_type + "'";
        if(!region.equals("-Select-"))
            query += " AND L.regionName='" + region + "'";
        if(!suburb.equals("-Select-"))
            query += " AND L.Suburb='" + suburb + "'";
        if(!roomNum.equals("-Select-"))
            query += " AND H.RoomNum=" + roomNum;
        if(!bathroomNum.equals("-Select-"))
            query += " AND H.Bathroom_num=" + bathroomNum;
        if(priceOrder.equals("-Select-"))
            query += " ORDER BY H.House_ID ASC";
        else if(priceOrder.equals("Increasing"))
            query += " ORDER BY H.Price ASC";
        else if(priceOrder.equals("Decreasing"))
            query += " ORDER BY H.Price DESC";

        try{
            ps = connectionUtil.getTheConnection().prepareStatement(query);
            rs = ps.executeQuery();
            
            DefaultTableModel tblModel = (DefaultTableModel) housesTable.getModel();
            tblModel.setRowCount(0);
            
            while(rs.next()){
                String id = String.valueOf(rs.getInt("House_ID"));
                String type = rs.getString("Type");
                String roomNo = String.valueOf(rs.getInt("RoomNum"));
                String bathroomNo = String.valueOf(rs.getInt("Bathroom_num"));
                String agency = rs.getString("Seller_Agency");
                String price = String.valueOf(rs.getInt("Price"));
                
                String tbData[] = {id, type, roomNo, bathroomNo, agency, price};
                tblModel.addRow(tbData);
            }
            
        } catch (SQLException e) {
            Logger.getLogger(login_page.class.getName()).log(Level.SEVERE,null,e);
        }
    }//GEN-LAST:event_searchButtonActionPerformed

    private void editLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_editLabelMouseClicked
        // TODO add your handling code here:
        
        client_edit_profile edit_profile = new client_edit_profile(username);
        edit_profile.pack();
        edit_profile.setLocationRelativeTo(null);    
        edit_profile.setVisible(true);
        this.dispose();
        
               
    }//GEN-LAST:event_editLabelMouseClicked

    private void priceSliderMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_priceSliderMouseClicked
        // TODO add your handling code here:
        String val = String.valueOf(priceSlider.getValue());
        priceLabel.setText(val);
    }//GEN-LAST:event_priceSliderMouseClicked

    private void priceSliderMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_priceSliderMouseReleased
        // TODO add your handling code here:
        String val = String.valueOf(priceSlider.getValue());
        priceLabel.setText(val);
    }//GEN-LAST:event_priceSliderMouseReleased

    private void priceOrderComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_priceOrderComboActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_priceOrderComboActionPerformed

    private void buyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buyButtonActionPerformed
        // TODO add your handling code here:
        int index = housesTable.getSelectedRow();
        if(index == -1) return;
        
        int houseId = Integer.valueOf(housesTable.getModel().getValueAt(index, 0).toString());
        
        JPanel panel = new JPanel();
        JLabel label = new JLabel("Please enter your password to confirm buy:");
        panel.setLayout(new GridLayout(3,1));
        panel.add(label);
        
        JPasswordField pf = new JPasswordField();
        panel.add(pf);
        int op = JOptionPane.showConfirmDialog(null, panel, null, JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE);

        if (op == JOptionPane.OK_OPTION) {
            String password = new String(pf.getPassword());
            String query = "SELECT password, user_id FROM USERS WHERE username='" + username + "'";
            PreparedStatement ps;
            ResultSet rs;

            try{
                ps=connectionUtil.getTheConnection().prepareStatement(query);
                rs=ps.executeQuery();
                rs.next();
                String user_pw = rs.getString("password");
                if(user_pw.equals(password)){
                    //rate agency TODO
                    String query_r = "SELECT Agency_Name FROM HOUSES, AGENCIES WHERE House_ID=" + houseId + " AND Seller_Agency=Agency_ID";
                    PreparedStatement ps_r;
                    ResultSet rs_r;
                    ps_r=connectionUtil.getTheConnection().prepareStatement(query_r);
                    rs_r=ps_r.executeQuery();
                    rs_r.next();
                    String agency_name = rs_r.getString("Agency_Name");
                    panel = new JPanel();
                    label = new JLabel("Rate your Agency (0-5):");
                    JLabel label2 = new JLabel(agency_name);
                    JTextField rateField = new JTextField(5);
                    panel.setLayout(new GridLayout(3,1));
                    panel.add(label);
                    panel.add(label2);
                    panel.add(rateField);
                    int ok = JOptionPane.showConfirmDialog(null, panel, null, JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE);
                    String rate = "-1";
                    if(ok==JOptionPane.OK_OPTION){
                        rate = rateField.getText();
                    }
                    
                    
                    //update user_id in houses table
                    String userid = rs.getString("user_id");
                    String query_h = "UPDATE HOUSES SET User_ID='" + userid + "' WHERE House_ID=" + houseId;
                    PreparedStatement ps_h;
                    ps_h=connectionUtil.getTheConnection().prepareStatement(query_h);
                    int row = ps_h.executeUpdate();
                    if(row != 1){
                        System.out.println("sth went wrong updating userid in houses (buy)");
                    }
                    
                    //insert serves table
                    String query_a = "SELECT Seller_Agency FROM HOUSES WHERE House_Id=" + houseId;
                    PreparedStatement ps_a;
                    ResultSet rs_a;
                    ps_a=connectionUtil.getTheConnection().prepareStatement(query_a);
                    rs_a = ps_a.executeQuery();
                    rs_a.next();
                    String agencyid = rs_a.getString("Seller_Agency");
                    
                    DateTimeFormatter dtf = DateTimeFormatter.ofPattern("yyyy-MM-dd");  
                    LocalDateTime now = LocalDateTime.now();
                    
                    String query_s = "INSERT INTO serves (Agency_ID, Client_ID, Date, rate) VALUES (?, ?, ?, ?)";
                    PreparedStatement ps_s;
                    ps_s=connectionUtil.getTheConnection().prepareStatement(query_s);
                    ps_s.setString(1, agencyid.trim());
                    ps_s.setString(2, userid.trim());
                    ps_s.setString(3, dtf.format(now));
                    ps_s.setString(4, rate.trim());
                    row = ps_s.executeUpdate();
                    if(row != 1){
                        System.out.println("sth went wrong inserting into serves table (buy)");
                    }
                    
                    //update table on the page
                    DefaultTableModel tblModel = (DefaultTableModel) housesTable.getModel();
                    tblModel.removeRow(index);
                    housesTable.validate();
                    housesTable.repaint();
                    
                    JOptionPane.showMessageDialog(null, "Congratulations!");
                } else {
                    JOptionPane.showMessageDialog(null, "Wrong password");
                }
            } catch (SQLException e) {
                Logger.getLogger(login_page.class.getName()).log(Level.SEVERE,null,e);
            }
            
        }
    }//GEN-LAST:event_buyButtonActionPerformed

    private void jLabel_locationsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel_locationsMouseClicked
        // TODO add your handling code here:
        
        location_search locations = new location_search(username);
        locations.pack();
        locations.setLocationRelativeTo(null);  
        locations.setVisible(true);
        this.dispose();
        
    }//GEN-LAST:event_jLabel_locationsMouseClicked

    private void infoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_infoButtonActionPerformed
        // TODO add your handling code here:
        int index = housesTable.getSelectedRow();
        if(index == -1) return;
        
        int houseId = Integer.valueOf(housesTable.getModel().getValueAt(index, 0).toString());
        house_info houseInfo = new house_info(houseId);
        int ok = JOptionPane.showConfirmDialog(null, houseInfo.getPanel(), null, JOptionPane.DEFAULT_OPTION, JOptionPane.PLAIN_MESSAGE);
    }//GEN-LAST:event_infoButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(main_client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(main_client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(main_client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(main_client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new main_client(username).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> bathroomNumCombo;
    private javax.swing.JButton buyButton;
    private javax.swing.JLabel editLabel;
    private javax.swing.JComboBox<String> houseTypeCombo;
    private javax.swing.JTable housesTable;
    private javax.swing.JButton infoButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel jLabel_locations;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel logoutLabel;
    private javax.swing.JLabel priceLabel;
    private javax.swing.JComboBox<String> priceOrderCombo;
    private javax.swing.JSlider priceSlider;
    private javax.swing.JComboBox<String> regionCombo;
    private javax.swing.JComboBox<String> roomNumCombo;
    private javax.swing.JButton searchButton;
    private javax.swing.JComboBox<String> suburbCombo;
    // End of variables declaration//GEN-END:variables
}
